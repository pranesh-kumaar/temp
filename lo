# Step 1: Data Exploration and Cleaning
import pandas as pd

# Load your dataset
data = pd.read_csv('your_data.csv')

# Explore the data
print(data.head())
print(data.info())

# Clean the data (handle missing values and outliers)
data.dropna(inplace=True)
data = data[(data['Client Assets'] > 0) & (data['Net Worth'] > 0)]

# Step 2: Feature Selection
selected_features = ['Client Assets', 'Net Worth', 'Liabilities', 'Age']

# Step 3: Data Transformation
# You can perform one-hot encoding for categorical variables if needed.

# Step 4: Feature Engineering
# Calculate age groups as a new feature
data['Age Group'] = pd.cut(data['Age'], bins=[0, 30, 40, 50, 60, 100], labels=['<30', '30-40', '40-50', '50-60', '60+'])

# Step 5: Segmentation Techniques
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Standardize the selected features
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data[selected_features])

# Apply K-Means clustering
kmeans = KMeans(n_clusters=4, random_state=0)
data['Cluster'] = kmeans.fit_predict(data_scaled)

# Step 6: Segmentation Validation (optional)
from sklearn.metrics import silhouette_score

silhouette_avg = silhouette_score(data_scaled, data['Cluster'])
print(f"Silhouette Score: {silhouette_avg}")

# Step 7: Interpretation and Insights
# Analyze and visualize the segments
segment_insights = data.groupby('Cluster')[selected_features].mean()
print(segment_insights)

# Step 8: Visualization
import matplotlib.pyplot as plt

# Example: Visualize age distribution in each cluster
plt.figure(figsize=(10, 6))
for cluster in data['Cluster'].unique():
    plt.hist(data[data['Cluster'] == cluster]['Age'], bins=20, label=f'Cluster {cluster}', alpha=0.5)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.legend()
plt.show()

# Step 9: Reporting
# Create a report or presentation summarizing your findings.

# Step 10: Iterate and Refine
# Repeat the process as needed with updated data or different segmentation techniques.