import pandas as pd
from pulp import LpVariable, LpProblem, lpSum, LpMaximize

# Assume df is your pandas DataFrame
df = pd.DataFrame({
    'Strategy': ['Strategy1', 'Strategy2', 'Strategy3'],
    'Returns': [0.05, 0.07, 0.06],
    'Equity': [0.5, 0.4, 0.6],
    'Alternatives': [0.4, 0.2, 0.0],
    'Fixed Income': [0.1, 0.4, 0.4]
})

# Create a linear programming problem
prob = LpProblem("Portfolio_Optimization", LpMaximize)

# Define decision variables (weights)
weights = LpVariable.dicts("Weight", df['Strategy'], 0, 1)

# Objective function: maximize portfolio returns
prob += lpSum([df.loc[i, 'Returns'] * weights[strategy] for i, strategy in enumerate(df['Strategy'])])

# Constraint: sum of weights equals 1
prob += lpSum([weights[strategy] for strategy in df['Strategy']]) == 1

# Constraints on asset class weights for each strategy
for i, strategy in enumerate(df['Strategy']):
    prob += weights[strategy] * df.loc[i, 'Equity'] == 0.6
    prob += weights[strategy] * df.loc[i, 'Alternatives'] == 0.1
    prob += weights[strategy] * df.loc[i, 'Fixed Income'] == 0.3

# Solve the problem
prob.solve()

# Extract and print the optimized weights
optimized_weights = {strategy: weights[strategy].varValue for strategy in df['Strategy']}
print("Optimized Weights:", optimized_weights)

# Calculate the optimized portfolio returns
optimized_returns = sum([df.loc[i, 'Returns'] * optimized_weights[strategy] for i, strategy in enumerate(df['Strategy'])])
print("Optimized Portfolio Returns:", optimized_returns)