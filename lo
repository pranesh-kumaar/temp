import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense

# Assuming your dataset is loaded and stored in X_train and y_train
# X_train should be a 3D array with shape (number of samples, 14, 26)
data = df.drop(['Open', 'Close', 'High', 'Low'], axis = 1)
X_train=[]
i = 0
for x in range(0,len(data)-14):
    y = data.iloc[i+14:i+14+14]
    X_train.append(y.values)
    i = i+1

X_train = np.array(X_train)

dfy = df['Signal'].iloc[14:].values
y_train = []
for x in dfy:
    y_train.append(x+1)
    
y_train = np.array(y_train)

# Build the CNN model
model = Sequential()
model.add(Conv1D(filters=32, kernel_size=3, activation='relu', input_shape=(14, 26)))
model.add(MaxPooling1D(pool_size=2))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(3, activation='softmax'))  # 3 output classes for buy (1), sell (-1), and hold (0)

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Assuming you have test data stored in X_test (3D array with shape (number of samples, 14, 26))

# Get predictions on test data
predictions = model.predict(X_test)
trade_signals = np.argmax(predictions, axis=1) - 1  # Convert predicted probabilities to trade signals (-1, 0, 1)

# trade_signals now contains the predicted trade signals for each row in your test data
