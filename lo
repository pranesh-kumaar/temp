import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load your stock dataset into a pandas DataFrame
data = pd.read_csv('your_stock_data.csv')

# Separate features and signals
features = data.drop(columns=['signals'])
signals = data['signals']

# Scale the features between 0 and 1
scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(features)

# Create sequences with historical features and signals
sequence_length = 15  # 14 previous days' features + current day's features
sequences = []
next_signals = []
for i in range(len(scaled_features) - sequence_length):
    sequences.append(scaled_features[i : i + sequence_length])
    next_signals.append(signals[i + sequence_length])

# Convert sequences and next_signals to numpy arrays
sequences = np.array(sequences)
next_signals = np.array(next_signals)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(sequences, next_signals, test_size=0.2, random_state=42)

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=64, input_shape=(sequence_length, num_features)))
model.add(Dense(units=1, activation='linear'))  # Adjust activation based on your needs

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model on the test set
loss = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss}')

# Use the trained model to make predictions
predictions = model.predict(X_test)

# You can convert the predictions back to buy/sell/hold values based on your desired threshold
# e.g., buy if prediction > 0.5, sell if prediction < -0.5, hold otherwise