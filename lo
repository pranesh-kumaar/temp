import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.mixture import GaussianMixture

# Generate synthetic data with three clusters
X, y = make_blobs(n_samples=300, centers=3, random_state=42)

# Create a GMM model with three components
n_components = 3
gmm = GaussianMixture(n_components=n_components, init_params='kmeans', max_iter=100)

# Fit the model to the data using the EM algorithm
gmm.fit(X)

# Predict cluster labels for each data point
labels = gmm.predict(X)

# Access the means, covariances, and weights of the components
means = gmm.means_
covariances = gmm.covariances_
weights = gmm.weights_

# Create a scatter plot of the data points with color-coded clusters
plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
plt.title('GMM Clustering Results')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')

# Plot the estimated means of the components
for i, (mean, cov) in enumerate(zip(means, covariances)):
    v, w = np.linalg.eigh(cov)
    v = 2.0 * np.sqrt(2.0) * np.sqrt(v)
    u = w[0] / np.linalg.norm(w[0])
    plt.scatter(mean[0], mean[1], c='red', marker='x', s=100, label=f'Component {i+1}')
    plt.quiver(mean[0], mean[1], u[0], u[1], color='red', scale=v, scale_units='xy')

plt.legend()
plt.show()