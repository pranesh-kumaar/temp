import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Assuming your dataset is loaded into a pandas DataFrame called 'data'
# Make sure the 'signal' column is the target (y) and the rest are features (X)
# Example dataset:
# data = pd.DataFrame({'current_data': [..], 'prev_data_1': [..], 'prev_data_2': [..], ..., 'signal': [..]})

def create_lagged_features(data, lag_days=14):
    """
    Create lagged features by appending the previous 'lag_days' rows to the current row.
    """
    X = data[['current_data']].copy()
    for i in range(1, lag_days + 1):
        X[f'prev_data_{i}'] = data['current_data'].shift(i)
    return X.dropna()

# Create lagged features
lag_days = 14
X = create_lagged_features(data, lag_days=lag_days)
y = data['signal'][lag_days:]  # Remove first 'lag_days' rows as they will have NaN values due to shifting

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model using Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
