import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
from sklearn.datasets import load_iris  # Replace with your dataset

# Load your dataset (replace 'load_iris()' with your data loading code)
data = load_iris()
X = data.data  # Your feature data

# Perform t-SNE
tsne = TSNE(n_components=2, random_state=42)
tsne_results = tsne.fit_transform(X)

# Create a DataFrame combining t-SNE results and original features
tsne_df = pd.DataFrame(data=tsne_results, columns=['t-SNE Dimension 1', 't-SNE Dimension 2'])
original_df = pd.DataFrame(data=X, columns=data.feature_names)
combined_df = pd.concat([tsne_df, original_df], axis=1)

# Calculate the correlation matrix
correlation_matrix = combined_df.corr()

# Separate correlation heatmaps for each t-SNE dimension
for dimension in tsne_df.columns:
    dim_correlation_matrix = correlation_matrix[[dimension]].drop(index=[dimension])
    dim_correlation_matrix = dim_correlation_matrix.drop(columns=[dimension])
    
    # Create a heatmap
    plt.figure(figsize=(6, 4))
    sns.heatmap(dim_correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, fmt=".2f")
    plt.title(f'Correlation Heatmap for {dimension}')
    plt.savefig(f'tsne_correlation_heatmap_{dimension}.png')  # Save the heatmap as an image
    plt.show()

# Drop rows and columns where correlation couldn't be shown
correlation_matrix = correlation_matrix.dropna(axis=0, how='all').dropna(axis=1, how='all')

# Save the correlation matrix to an Excel file with color grading
cmap = sns.color_palette("coolwarm", as_cmap=True)
correlation_styled = correlation_matrix.style.background_gradient(cmap=cmap, axis=None).set_precision(2)
correlation_styled.to_excel('tsne_correlation_matrix_colored.xlsx', engine='openpyxl', index=False)