import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, LSTM

# Assuming you have a DataFrame called 'dataset' with columns: 'Open', 'High', 'Low', 'Close', 'Volume', 'Macd', 'Stoch', 'Vwap', 'Rsi', and 'Signal'.

# Function to create input sequences with previous 14 days data
def create_sequences(data, n_days=14):
    sequences = []
    for i in range(n_days, len(data)):
        sequences.append(data[i-n_days:i])
    return np.array(sequences)

# Separate input features (stock data, technical indicators) and target labels (signals)
X_stock_tech = dataset[['Open', 'High', 'Low', 'Close', 'Volume', 'Macd', 'Stoch', 'Vwap', 'Rsi']].values
y_signal = dataset['Signal'].values

# Create sequences for LSTM input
X_sequence = create_sequences(X_stock_tech)

# Separate train and test data (e.g., 80% train, 20% test)
train_size = int(0.8 * len(X_sequence))
X_train, X_test = X_sequence[:train_size], X_sequence[train_size:]
y_train, y_test = y_signal[:train_size], y_signal[train_size:]

# Build the neural network model
model = Sequential()
model.add(LSTM(64, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(1, activation='tanh')) # Using 'tanh' activation for signals between -1 and 1

# Compile the model
model.compile(loss='mean_squared_error', optimizer='adam')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=16, validation_data=(X_test, y_test))

# Evaluate the model
loss = model.evaluate(X_test, y_test)
print(f"Test loss: {loss}")

# Now, you can use the trained model to predict signals for new data:
# new_data = ... (prepare the new data with the same structure as X_sequence)
# predicted_signals = model.predict(new_data)