import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
from pandas_datareader import data
import scipy

sim_df = pd.DataFrame()
sim_df['Close'] = signals['Close']
sim_df = sim_df.reset_index()
sim_df = sim_df.set_index('Date')

sim_df = np.log(sim_df).diff().dropna()

S0 = sim_df['Close'][len(sim_df)-1]
mu = sim_df.mean()
var = sim_df.var()
drift = mu - (0.5*var)
desvest = sim_df.std()
n_simulations = 30
days = np.arange(14)

epsilon = scipy.stats.norm.ppf(np.random.rand(len(days), n_simulations))
returns =  drift.values + desvest.values * epsilon
returns_interval_1 = np.zeros(len(days))
returns_interval_2 = np.zeros(len(days))
expected_returns = np.zeros(len(days))

for t in range(1, len(days)):
    returns_interval_1[t] = drift*(t-days[0]) + desvest *1.96*np.sqrt(t - days[0])
    returns_interval_2[t] = drift*(t-days[0]) + desvest *-1.96*np.sqrt(t - days[0])

S = np.zeros_like(returns)
S_interval_1 = np.zeros_like(returns_interval_1)
S_interval_2 = np.zeros_like(returns_interval_2)
S_interval_1[0] = S0
S_interval_2[0] = S0
S[0] = S0
expected_returns[0] = S0
#------------------------------       Price Modeling     ------------------------------#

for t in range(1, len(days)):
    S[t] = S[t-1]*np.exp(returns[t])
    S_interval_1[t] = (S0)*np.exp(returns_interval_1[t])
    S_interval_2[t] = (S0)*np.exp(returns_interval_2[t])
    expected_returns[t] = (expected_returns[t-1])*np.exp(mu.values)
