import numpy as np
from sklearn.cluster import KMeans
from sklearn.metrics import davies_bouldin_score

# Generate or load your data (X)

# Define a range of possible cluster numbers
k_values = range(2, 11)  # You can adjust this range as needed

best_score = float('inf')
optimal_k = 2  # Default to 2 clusters

for k in k_values:
    kmeans = KMeans(n_clusters=k)
    cluster_labels = kmeans.fit_predict(X)
    db_index = davies_bouldin_score(X, cluster_labels)
    
    if db_index < best_score:
        best_score = db_index
        optimal_k = k

print("Optimal number of clusters:", optimal_k)