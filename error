import numpy as np
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt

# Generate sample data
data, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0)

# Calculate within-cluster sum of squares for different values of k
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(data)
    wcss.append(kmeans.inertia_)

# Find the elbow point using the "knee" of the curve
elbow_point = np.argmin(np.diff(wcss)) + 1

# Plot the WCSS values with the elbow point marked
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.xticks(range(1, 11))
plt.annotate(f'Elbow Point: {elbow_point}', xy=(elbow_point, wcss[elbow_point - 1]), xytext=(elbow_point + 1, wcss[elbow_point - 1] + 1000),
             arrowprops=dict(facecolor='black', shrink=0.05))
plt.show()

print("Suggested number of clusters:", elbow_point)