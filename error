import pandas as pd
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from itertools import combinations
from sklearn.impute import SimpleImputer

# Load your dataset
data = pd.read_csv('your_dataset.csv')

# Handle missing values
imputer = SimpleImputer(strategy='mean')  # You can use different strategies
numeric_data = data.select_dtypes(include=['number'])
imputed_data = pd.DataFrame(imputer.fit_transform(numeric_data), columns=numeric_data.columns)

# Initialize variables to store the best score and corresponding columns
best_score = -1
best_columns = []

# Iterate through all combinations of columns
for num_columns in range(2, len(imputed_data.columns) + 1):
    for column_combination in combinations(imputed_data.columns, num_columns):
        subset_data = imputed_data[list(column_combination)]
        
        # Perform K-means clustering
        num_clusters = 3  # Change as needed
        kmeans = KMeans(n_clusters=num_clusters)
        labels = kmeans.fit_predict(subset_data)
        
        # Calculate Silhouette Score
        score = silhouette_score(subset_data, labels)
        
        # Update best score and columns if necessary
        if score > best_score:
            best_score = score
            best_columns = column_combination

print("Best columns for clustering:", best_columns)